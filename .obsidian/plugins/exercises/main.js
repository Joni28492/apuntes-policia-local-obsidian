/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/parsimmon/build/parsimmon.umd.min.js
var require_parsimmon_umd_min = __commonJS({
  "node_modules/parsimmon/build/parsimmon.umd.min.js"(exports, module2) {
    !function(n, t) {
      "object" == typeof exports && "object" == typeof module2 ? module2.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.Parsimmon = t() : n.Parsimmon = t();
    }("undefined" != typeof self ? self : exports, function() {
      return function(n) {
        var t = {};
        function r(e) {
          if (t[e])
            return t[e].exports;
          var u = t[e] = { i: e, l: false, exports: {} };
          return n[e].call(u.exports, u, u.exports, r), u.l = true, u.exports;
        }
        return r.m = n, r.c = t, r.d = function(n2, t2, e) {
          r.o(n2, t2) || Object.defineProperty(n2, t2, { configurable: false, enumerable: true, get: e });
        }, r.r = function(n2) {
          Object.defineProperty(n2, "__esModule", { value: true });
        }, r.n = function(n2) {
          var t2 = n2 && n2.__esModule ? function() {
            return n2.default;
          } : function() {
            return n2;
          };
          return r.d(t2, "a", t2), t2;
        }, r.o = function(n2, t2) {
          return Object.prototype.hasOwnProperty.call(n2, t2);
        }, r.p = "", r(r.s = 0);
      }([function(n, t, r) {
        "use strict";
        function e(n2) {
          if (!(this instanceof e))
            return new e(n2);
          this._ = n2;
        }
        var u = e.prototype;
        function o(n2, t2) {
          for (var r2 = 0; r2 < n2; r2++)
            t2(r2);
        }
        function i(n2, t2, r2) {
          return function(n3, t3) {
            o(t3.length, function(r3) {
              n3(t3[r3], r3, t3);
            });
          }(function(r3, e2, u2) {
            t2 = n2(t2, r3, e2, u2);
          }, r2), t2;
        }
        function a(n2, t2) {
          return i(function(t3, r2, e2, u2) {
            return t3.concat([n2(r2, e2, u2)]);
          }, [], t2);
        }
        function f(n2, t2) {
          var r2 = { v: 0, buf: t2 };
          return o(n2, function() {
            var n3;
            r2 = { v: r2.v << 1 | (n3 = r2.buf, n3[0] >> 7), buf: function(n4) {
              var t3 = i(function(n5, t4, r3, e2) {
                return n5.concat(r3 === e2.length - 1 ? Buffer.from([t4, 0]).readUInt16BE(0) : e2.readUInt16BE(r3));
              }, [], n4);
              return Buffer.from(a(function(n5) {
                return (n5 << 1 & 65535) >> 8;
              }, t3));
            }(r2.buf) };
          }), r2;
        }
        function c() {
          return "undefined" != typeof Buffer;
        }
        function s() {
          if (!c())
            throw new Error("Buffer global does not exist; please use webpack if you need to parse Buffers in the browser.");
        }
        function l(n2) {
          s();
          var t2 = i(function(n3, t3) {
            return n3 + t3;
          }, 0, n2);
          if (t2 % 8 != 0)
            throw new Error("The bits [" + n2.join(", ") + "] add up to " + t2 + " which is not an even number of bytes; the total should be divisible by 8");
          var r2, u2 = t2 / 8, o2 = (r2 = function(n3) {
            return n3 > 48;
          }, i(function(n3, t3) {
            return n3 || (r2(t3) ? t3 : n3);
          }, null, n2));
          if (o2)
            throw new Error(o2 + " bit range requested exceeds 48 bit (6 byte) Number max.");
          return new e(function(t3, r3) {
            var e2 = u2 + r3;
            return e2 > t3.length ? x(r3, u2.toString() + " bytes") : b(e2, i(function(n3, t4) {
              var r4 = f(t4, n3.buf);
              return { coll: n3.coll.concat(r4.v), buf: r4.buf };
            }, { coll: [], buf: t3.slice(r3, e2) }, n2).coll);
          });
        }
        function h(n2, t2) {
          return new e(function(r2, e2) {
            return s(), e2 + t2 > r2.length ? x(e2, t2 + " bytes for " + n2) : b(e2 + t2, r2.slice(e2, e2 + t2));
          });
        }
        function p(n2, t2) {
          if ("number" != typeof (r2 = t2) || Math.floor(r2) !== r2 || t2 < 0 || t2 > 6)
            throw new Error(n2 + " requires integer length in range [0, 6].");
          var r2;
        }
        function d(n2) {
          return p("uintBE", n2), h("uintBE(" + n2 + ")", n2).map(function(t2) {
            return t2.readUIntBE(0, n2);
          });
        }
        function v(n2) {
          return p("uintLE", n2), h("uintLE(" + n2 + ")", n2).map(function(t2) {
            return t2.readUIntLE(0, n2);
          });
        }
        function g(n2) {
          return p("intBE", n2), h("intBE(" + n2 + ")", n2).map(function(t2) {
            return t2.readIntBE(0, n2);
          });
        }
        function m(n2) {
          return p("intLE", n2), h("intLE(" + n2 + ")", n2).map(function(t2) {
            return t2.readIntLE(0, n2);
          });
        }
        function y(n2) {
          return n2 instanceof e;
        }
        function E(n2) {
          return "[object Array]" === {}.toString.call(n2);
        }
        function w(n2) {
          return c() && Buffer.isBuffer(n2);
        }
        function b(n2, t2) {
          return { status: true, index: n2, value: t2, furthest: -1, expected: [] };
        }
        function x(n2, t2) {
          return E(t2) || (t2 = [t2]), { status: false, index: -1, value: null, furthest: n2, expected: t2 };
        }
        function B(n2, t2) {
          if (!t2)
            return n2;
          if (n2.furthest > t2.furthest)
            return n2;
          var r2 = n2.furthest === t2.furthest ? function(n3, t3) {
            if (function() {
              if (void 0 !== e._supportsSet)
                return e._supportsSet;
              var n4 = "undefined" != typeof Set;
              return e._supportsSet = n4, n4;
            }() && Array.from) {
              for (var r3 = new Set(n3), u2 = 0; u2 < t3.length; u2++)
                r3.add(t3[u2]);
              var o2 = Array.from(r3);
              return o2.sort(), o2;
            }
            for (var i2 = {}, a2 = 0; a2 < n3.length; a2++)
              i2[n3[a2]] = true;
            for (var f2 = 0; f2 < t3.length; f2++)
              i2[t3[f2]] = true;
            var c2 = [];
            for (var s2 in i2)
              ({}).hasOwnProperty.call(i2, s2) && c2.push(s2);
            return c2.sort(), c2;
          }(n2.expected, t2.expected) : t2.expected;
          return { status: n2.status, index: n2.index, value: n2.value, furthest: t2.furthest, expected: r2 };
        }
        var j = {};
        function S(n2, t2) {
          if (w(n2))
            return { offset: t2, line: -1, column: -1 };
          n2 in j || (j[n2] = {});
          for (var r2 = j[n2], e2 = 0, u2 = 0, o2 = 0, i2 = t2; i2 >= 0; ) {
            if (i2 in r2) {
              e2 = r2[i2].line, 0 === o2 && (o2 = r2[i2].lineStart);
              break;
            }
            ("\n" === n2.charAt(i2) || "\r" === n2.charAt(i2) && "\n" !== n2.charAt(i2 + 1)) && (u2++, 0 === o2 && (o2 = i2 + 1)), i2--;
          }
          var a2 = e2 + u2, f2 = t2 - o2;
          return r2[t2] = { line: a2, lineStart: o2 }, { offset: t2, line: a2 + 1, column: f2 + 1 };
        }
        function _(n2) {
          if (!y(n2))
            throw new Error("not a parser: " + n2);
        }
        function L(n2, t2) {
          return "string" == typeof n2 ? n2.charAt(t2) : n2[t2];
        }
        function O(n2) {
          if ("number" != typeof n2)
            throw new Error("not a number: " + n2);
        }
        function k(n2) {
          if ("function" != typeof n2)
            throw new Error("not a function: " + n2);
        }
        function P(n2) {
          if ("string" != typeof n2)
            throw new Error("not a string: " + n2);
        }
        var q = 2, A = 3, I = 8, F = 5 * I, M = 4 * I, z = "  ";
        function R(n2, t2) {
          return new Array(t2 + 1).join(n2);
        }
        function U(n2, t2, r2) {
          var e2 = t2 - n2.length;
          return e2 <= 0 ? n2 : R(r2, e2) + n2;
        }
        function W(n2, t2, r2, e2) {
          return { from: n2 - t2 > 0 ? n2 - t2 : 0, to: n2 + r2 > e2 ? e2 : n2 + r2 };
        }
        function D(n2, t2) {
          var r2, e2, u2, o2, f2, c2 = t2.index, s2 = c2.offset, l2 = 1;
          if (s2 === n2.length)
            return "Got the end of the input";
          if (w(n2)) {
            var h2 = s2 - s2 % I, p2 = s2 - h2, d2 = W(h2, F, M + I, n2.length), v2 = a(function(n3) {
              return a(function(n4) {
                return U(n4.toString(16), 2, "0");
              }, n3);
            }, function(n3, t3) {
              var r3 = n3.length, e3 = [], u3 = 0;
              if (r3 <= t3)
                return [n3.slice()];
              for (var o3 = 0; o3 < r3; o3++)
                e3[u3] || e3.push([]), e3[u3].push(n3[o3]), (o3 + 1) % t3 == 0 && u3++;
              return e3;
            }(n2.slice(d2.from, d2.to).toJSON().data, I));
            o2 = function(n3) {
              return 0 === n3.from && 1 === n3.to ? { from: n3.from, to: n3.to } : { from: n3.from / I, to: Math.floor(n3.to / I) };
            }(d2), e2 = h2 / I, r2 = 3 * p2, p2 >= 4 && (r2 += 1), l2 = 2, u2 = a(function(n3) {
              return n3.length <= 4 ? n3.join(" ") : n3.slice(0, 4).join(" ") + "  " + n3.slice(4).join(" ");
            }, v2), (f2 = (8 * (o2.to > 0 ? o2.to - 1 : o2.to)).toString(16).length) < 2 && (f2 = 2);
          } else {
            var g2 = n2.split(/\r\n|[\n\r\u2028\u2029]/);
            r2 = c2.column - 1, e2 = c2.line - 1, o2 = W(e2, q, A, g2.length), u2 = g2.slice(o2.from, o2.to), f2 = o2.to.toString().length;
          }
          var m2 = e2 - o2.from;
          return w(n2) && (f2 = (8 * (o2.to > 0 ? o2.to - 1 : o2.to)).toString(16).length) < 2 && (f2 = 2), i(function(t3, e3, u3) {
            var i2, a2 = u3 === m2, c3 = a2 ? "> " : z;
            return i2 = w(n2) ? U((8 * (o2.from + u3)).toString(16), f2, "0") : U((o2.from + u3 + 1).toString(), f2, " "), [].concat(t3, [c3 + i2 + " | " + e3], a2 ? [z + R(" ", f2) + " | " + U("", r2, " ") + R("^", l2)] : []);
          }, [], u2).join("\n");
        }
        function N(n2, t2) {
          return ["\n", "-- PARSING FAILED " + R("-", 50), "\n\n", D(n2, t2), "\n\n", (r2 = t2.expected, 1 === r2.length ? "Expected:\n\n" + r2[0] : "Expected one of the following: \n\n" + r2.join(", ")), "\n"].join("");
          var r2;
        }
        function G(n2) {
          return void 0 !== n2.flags ? n2.flags : [n2.global ? "g" : "", n2.ignoreCase ? "i" : "", n2.multiline ? "m" : "", n2.unicode ? "u" : "", n2.sticky ? "y" : ""].join("");
        }
        function C() {
          for (var n2 = [].slice.call(arguments), t2 = n2.length, r2 = 0; r2 < t2; r2 += 1)
            _(n2[r2]);
          return e(function(r3, e2) {
            for (var u2, o2 = new Array(t2), i2 = 0; i2 < t2; i2 += 1) {
              if (!(u2 = B(n2[i2]._(r3, e2), u2)).status)
                return u2;
              o2[i2] = u2.value, e2 = u2.index;
            }
            return B(b(e2, o2), u2);
          });
        }
        function J() {
          var n2 = [].slice.call(arguments);
          if (0 === n2.length)
            throw new Error("seqMap needs at least one argument");
          var t2 = n2.pop();
          return k(t2), C.apply(null, n2).map(function(n3) {
            return t2.apply(null, n3);
          });
        }
        function T() {
          var n2 = [].slice.call(arguments), t2 = n2.length;
          if (0 === t2)
            return Y("zero alternates");
          for (var r2 = 0; r2 < t2; r2 += 1)
            _(n2[r2]);
          return e(function(t3, r3) {
            for (var e2, u2 = 0; u2 < n2.length; u2 += 1)
              if ((e2 = B(n2[u2]._(t3, r3), e2)).status)
                return e2;
            return e2;
          });
        }
        function V(n2, t2) {
          return H(n2, t2).or(X([]));
        }
        function H(n2, t2) {
          return _(n2), _(t2), J(n2, t2.then(n2).many(), function(n3, t3) {
            return [n3].concat(t3);
          });
        }
        function K(n2) {
          P(n2);
          var t2 = "'" + n2 + "'";
          return e(function(r2, e2) {
            var u2 = e2 + n2.length, o2 = r2.slice(e2, u2);
            return o2 === n2 ? b(u2, o2) : x(e2, t2);
          });
        }
        function Q(n2, t2) {
          !function(n3) {
            if (!(n3 instanceof RegExp))
              throw new Error("not a regexp: " + n3);
            for (var t3 = G(n3), r3 = 0; r3 < t3.length; r3++) {
              var e2 = t3.charAt(r3);
              if ("i" !== e2 && "m" !== e2 && "u" !== e2 && "s" !== e2)
                throw new Error('unsupported regexp flag "' + e2 + '": ' + n3);
            }
          }(n2), arguments.length >= 2 ? O(t2) : t2 = 0;
          var r2 = function(n3) {
            return RegExp("^(?:" + n3.source + ")", G(n3));
          }(n2), u2 = "" + n2;
          return e(function(n3, e2) {
            var o2 = r2.exec(n3.slice(e2));
            if (o2) {
              if (0 <= t2 && t2 <= o2.length) {
                var i2 = o2[0], a2 = o2[t2];
                return b(e2 + i2.length, a2);
              }
              return x(e2, "valid match group (0 to " + o2.length + ") in " + u2);
            }
            return x(e2, u2);
          });
        }
        function X(n2) {
          return e(function(t2, r2) {
            return b(r2, n2);
          });
        }
        function Y(n2) {
          return e(function(t2, r2) {
            return x(r2, n2);
          });
        }
        function Z(n2) {
          if (y(n2))
            return e(function(t2, r2) {
              var e2 = n2._(t2, r2);
              return e2.index = r2, e2.value = "", e2;
            });
          if ("string" == typeof n2)
            return Z(K(n2));
          if (n2 instanceof RegExp)
            return Z(Q(n2));
          throw new Error("not a string, regexp, or parser: " + n2);
        }
        function $(n2) {
          return _(n2), e(function(t2, r2) {
            var e2 = n2._(t2, r2), u2 = t2.slice(r2, e2.index);
            return e2.status ? x(r2, 'not "' + u2 + '"') : b(r2, null);
          });
        }
        function nn(n2) {
          return k(n2), e(function(t2, r2) {
            var e2 = L(t2, r2);
            return r2 < t2.length && n2(e2) ? b(r2 + 1, e2) : x(r2, "a character/byte matching " + n2);
          });
        }
        function tn(n2, t2) {
          arguments.length < 2 && (t2 = n2, n2 = void 0);
          var r2 = e(function(n3, e2) {
            return r2._ = t2()._, r2._(n3, e2);
          });
          return n2 ? r2.desc(n2) : r2;
        }
        function rn() {
          return Y("fantasy-land/empty");
        }
        u.parse = function(n2) {
          if ("string" != typeof n2 && !w(n2))
            throw new Error(".parse must be called with a string or Buffer as its argument");
          var t2, r2 = this.skip(an)._(n2, 0);
          return t2 = r2.status ? { status: true, value: r2.value } : { status: false, index: S(n2, r2.furthest), expected: r2.expected }, delete j[n2], t2;
        }, u.tryParse = function(n2) {
          var t2 = this.parse(n2);
          if (t2.status)
            return t2.value;
          var r2 = N(n2, t2), e2 = new Error(r2);
          throw e2.type = "ParsimmonError", e2.result = t2, e2;
        }, u.assert = function(n2, t2) {
          return this.chain(function(r2) {
            return n2(r2) ? X(r2) : Y(t2);
          });
        }, u.or = function(n2) {
          return T(this, n2);
        }, u.trim = function(n2) {
          return this.wrap(n2, n2);
        }, u.wrap = function(n2, t2) {
          return J(n2, this, t2, function(n3, t3) {
            return t3;
          });
        }, u.thru = function(n2) {
          return n2(this);
        }, u.then = function(n2) {
          return _(n2), C(this, n2).map(function(n3) {
            return n3[1];
          });
        }, u.many = function() {
          var n2 = this;
          return e(function(t2, r2) {
            for (var e2 = [], u2 = void 0; ; ) {
              if (!(u2 = B(n2._(t2, r2), u2)).status)
                return B(b(r2, e2), u2);
              if (r2 === u2.index)
                throw new Error("infinite loop detected in .many() parser --- calling .many() on a parser which can accept zero characters is usually the cause");
              r2 = u2.index, e2.push(u2.value);
            }
          });
        }, u.tieWith = function(n2) {
          return P(n2), this.map(function(t2) {
            if (function(n3) {
              if (!E(n3))
                throw new Error("not an array: " + n3);
            }(t2), t2.length) {
              P(t2[0]);
              for (var r2 = t2[0], e2 = 1; e2 < t2.length; e2++)
                P(t2[e2]), r2 += n2 + t2[e2];
              return r2;
            }
            return "";
          });
        }, u.tie = function() {
          return this.tieWith("");
        }, u.times = function(n2, t2) {
          var r2 = this;
          return arguments.length < 2 && (t2 = n2), O(n2), O(t2), e(function(e2, u2) {
            for (var o2 = [], i2 = void 0, a2 = void 0, f2 = 0; f2 < n2; f2 += 1) {
              if (a2 = B(i2 = r2._(e2, u2), a2), !i2.status)
                return a2;
              u2 = i2.index, o2.push(i2.value);
            }
            for (; f2 < t2 && (a2 = B(i2 = r2._(e2, u2), a2), i2.status); f2 += 1)
              u2 = i2.index, o2.push(i2.value);
            return B(b(u2, o2), a2);
          });
        }, u.result = function(n2) {
          return this.map(function() {
            return n2;
          });
        }, u.atMost = function(n2) {
          return this.times(0, n2);
        }, u.atLeast = function(n2) {
          return J(this.times(n2), this.many(), function(n3, t2) {
            return n3.concat(t2);
          });
        }, u.map = function(n2) {
          k(n2);
          var t2 = this;
          return e(function(r2, e2) {
            var u2 = t2._(r2, e2);
            return u2.status ? B(b(u2.index, n2(u2.value)), u2) : u2;
          });
        }, u.contramap = function(n2) {
          k(n2);
          var t2 = this;
          return e(function(r2, e2) {
            var u2 = t2.parse(n2(r2.slice(e2)));
            return u2.status ? b(e2 + r2.length, u2.value) : u2;
          });
        }, u.promap = function(n2, t2) {
          return k(n2), k(t2), this.contramap(n2).map(t2);
        }, u.skip = function(n2) {
          return C(this, n2).map(function(n3) {
            return n3[0];
          });
        }, u.mark = function() {
          return J(en, this, en, function(n2, t2, r2) {
            return { start: n2, value: t2, end: r2 };
          });
        }, u.node = function(n2) {
          return J(en, this, en, function(t2, r2, e2) {
            return { name: n2, value: r2, start: t2, end: e2 };
          });
        }, u.sepBy = function(n2) {
          return V(this, n2);
        }, u.sepBy1 = function(n2) {
          return H(this, n2);
        }, u.lookahead = function(n2) {
          return this.skip(Z(n2));
        }, u.notFollowedBy = function(n2) {
          return this.skip($(n2));
        }, u.desc = function(n2) {
          E(n2) || (n2 = [n2]);
          var t2 = this;
          return e(function(r2, e2) {
            var u2 = t2._(r2, e2);
            return u2.status || (u2.expected = n2), u2;
          });
        }, u.fallback = function(n2) {
          return this.or(X(n2));
        }, u.ap = function(n2) {
          return J(n2, this, function(n3, t2) {
            return n3(t2);
          });
        }, u.chain = function(n2) {
          var t2 = this;
          return e(function(r2, e2) {
            var u2 = t2._(r2, e2);
            return u2.status ? B(n2(u2.value)._(r2, u2.index), u2) : u2;
          });
        }, u.concat = u.or, u.empty = rn, u.of = X, u["fantasy-land/ap"] = u.ap, u["fantasy-land/chain"] = u.chain, u["fantasy-land/concat"] = u.concat, u["fantasy-land/empty"] = u.empty, u["fantasy-land/of"] = u.of, u["fantasy-land/map"] = u.map;
        var en = e(function(n2, t2) {
          return b(t2, S(n2, t2));
        }), un = e(function(n2, t2) {
          return t2 >= n2.length ? x(t2, "any character/byte") : b(t2 + 1, L(n2, t2));
        }), on = e(function(n2, t2) {
          return b(n2.length, n2.slice(t2));
        }), an = e(function(n2, t2) {
          return t2 < n2.length ? x(t2, "EOF") : b(t2, null);
        }), fn = Q(/[0-9]/).desc("a digit"), cn = Q(/[0-9]*/).desc("optional digits"), sn = Q(/[a-z]/i).desc("a letter"), ln = Q(/[a-z]*/i).desc("optional letters"), hn = Q(/\s*/).desc("optional whitespace"), pn = Q(/\s+/).desc("whitespace"), dn = K("\r"), vn = K("\n"), gn = K("\r\n"), mn = T(gn, vn, dn).desc("newline"), yn = T(mn, an);
        e.all = on, e.alt = T, e.any = un, e.cr = dn, e.createLanguage = function(n2) {
          var t2 = {};
          for (var r2 in n2)
            ({}).hasOwnProperty.call(n2, r2) && function(r3) {
              t2[r3] = tn(function() {
                return n2[r3](t2);
              });
            }(r2);
          return t2;
        }, e.crlf = gn, e.custom = function(n2) {
          return e(n2(b, x));
        }, e.digit = fn, e.digits = cn, e.empty = rn, e.end = yn, e.eof = an, e.fail = Y, e.formatError = N, e.index = en, e.isParser = y, e.lazy = tn, e.letter = sn, e.letters = ln, e.lf = vn, e.lookahead = Z, e.makeFailure = x, e.makeSuccess = b, e.newline = mn, e.noneOf = function(n2) {
          return nn(function(t2) {
            return n2.indexOf(t2) < 0;
          }).desc("none of '" + n2 + "'");
        }, e.notFollowedBy = $, e.of = X, e.oneOf = function(n2) {
          for (var t2 = n2.split(""), r2 = 0; r2 < t2.length; r2++)
            t2[r2] = "'" + t2[r2] + "'";
          return nn(function(t3) {
            return n2.indexOf(t3) >= 0;
          }).desc(t2);
        }, e.optWhitespace = hn, e.Parser = e, e.range = function(n2, t2) {
          return nn(function(r2) {
            return n2 <= r2 && r2 <= t2;
          }).desc(n2 + "-" + t2);
        }, e.regex = Q, e.regexp = Q, e.sepBy = V, e.sepBy1 = H, e.seq = C, e.seqMap = J, e.seqObj = function() {
          for (var n2, t2 = {}, r2 = 0, u2 = (n2 = arguments, Array.prototype.slice.call(n2)), o2 = u2.length, i2 = 0; i2 < o2; i2 += 1) {
            var a2 = u2[i2];
            if (!y(a2)) {
              if (E(a2) && 2 === a2.length && "string" == typeof a2[0] && y(a2[1])) {
                var f2 = a2[0];
                if (Object.prototype.hasOwnProperty.call(t2, f2))
                  throw new Error("seqObj: duplicate key " + f2);
                t2[f2] = true, r2++;
                continue;
              }
              throw new Error("seqObj arguments must be parsers or [string, parser] array pairs.");
            }
          }
          if (0 === r2)
            throw new Error("seqObj expects at least one named parser, found zero");
          return e(function(n3, t3) {
            for (var r3, e2 = {}, i3 = 0; i3 < o2; i3 += 1) {
              var a3, f3;
              if (E(u2[i3]) ? (a3 = u2[i3][0], f3 = u2[i3][1]) : (a3 = null, f3 = u2[i3]), !(r3 = B(f3._(n3, t3), r3)).status)
                return r3;
              a3 && (e2[a3] = r3.value), t3 = r3.index;
            }
            return B(b(t3, e2), r3);
          });
        }, e.string = K, e.succeed = X, e.takeWhile = function(n2) {
          return k(n2), e(function(t2, r2) {
            for (var e2 = r2; e2 < t2.length && n2(L(t2, e2)); )
              e2++;
            return b(e2, t2.slice(r2, e2));
          });
        }, e.test = nn, e.whitespace = pn, e["fantasy-land/empty"] = rn, e["fantasy-land/of"] = X, e.Binary = { bitSeq: l, bitSeqObj: function(n2) {
          s();
          var t2 = {}, r2 = 0, e2 = a(function(n3) {
            if (E(n3)) {
              var e3 = n3;
              if (2 !== e3.length)
                throw new Error("[" + e3.join(", ") + "] should be length 2, got length " + e3.length);
              if (P(e3[0]), O(e3[1]), Object.prototype.hasOwnProperty.call(t2, e3[0]))
                throw new Error("duplicate key in bitSeqObj: " + e3[0]);
              return t2[e3[0]] = true, r2++, e3;
            }
            return O(n3), [null, n3];
          }, n2);
          if (r2 < 1)
            throw new Error("bitSeqObj expects at least one named pair, got [" + n2.join(", ") + "]");
          var u2 = a(function(n3) {
            return n3[0];
          }, e2);
          return l(a(function(n3) {
            return n3[1];
          }, e2)).map(function(n3) {
            return i(function(n4, t3) {
              return null !== t3[0] && (n4[t3[0]] = t3[1]), n4;
            }, {}, a(function(t3, r3) {
              return [t3, n3[r3]];
            }, u2));
          });
        }, byte: function(n2) {
          if (s(), O(n2), n2 > 255)
            throw new Error("Value specified to byte constructor (" + n2 + "=0x" + n2.toString(16) + ") is larger in value than a single byte.");
          var t2 = (n2 > 15 ? "0x" : "0x0") + n2.toString(16);
          return e(function(r2, e2) {
            var u2 = L(r2, e2);
            return u2 === n2 ? b(e2 + 1, u2) : x(e2, t2);
          });
        }, buffer: function(n2) {
          return h("buffer", n2).map(function(n3) {
            return Buffer.from(n3);
          });
        }, encodedString: function(n2, t2) {
          return h("string", t2).map(function(t3) {
            return t3.toString(n2);
          });
        }, uintBE: d, uint8BE: d(1), uint16BE: d(2), uint32BE: d(4), uintLE: v, uint8LE: v(1), uint16LE: v(2), uint32LE: v(4), intBE: g, int8BE: g(1), int16BE: g(2), int32BE: g(4), intLE: m, int8LE: m(1), int16LE: m(2), int32LE: m(4), floatBE: h("floatBE", 4).map(function(n2) {
          return n2.readFloatBE(0);
        }), floatLE: h("floatLE", 4).map(function(n2) {
          return n2.readFloatLE(0);
        }), doubleBE: h("doubleBE", 8).map(function(n2) {
          return n2.readDoubleBE(0);
        }), doubleLE: h("doubleLE", 8).map(function(n2) {
          return n2.readDoubleLE(0);
        }) }, n.exports = e;
      }]);
    });
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianExercises
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/parser/index.ts
var import_parsimmon = __toESM(require_parsimmon_umd_min());
var W_EOF = import_parsimmon.whitespace.or(import_parsimmon.eof);
var OPTW_EOF = import_parsimmon.optWhitespace.or(import_parsimmon.eof);
var keyed = (parser) => parser.skip(OPTW_EOF);
var listed = (parser, seperator = ",") => parser.sepBy((0, import_parsimmon.string)(seperator).skip(import_parsimmon.optWhitespace));
var opt = (parser) => parser.times(0, 1).map((res) => res.length === 0 ? null : res[0]);
var sided = (parser) => import_parsimmon.optWhitespace.then(parser).skip(import_parsimmon.optWhitespace);
var NUMBER = keyed((0, import_parsimmon.regex)(/\d+/)).map(parseInt);
var DECIMAL = keyed((0, import_parsimmon.regex)(/\d+\.\d+/)).map(parseFloat);
var NUMERIC = NUMBER.or(DECIMAL).map((value) => ({ value, type: "number" }));
var WORD = keyed((0, import_parsimmon.regex)(/[\w_/.\-$]+/));
var UWORD = keyed((0, import_parsimmon.regex)(/[\w_/.\-$]+/u));
var STRING = (0, import_parsimmon.regex)(/"(.*?)"|'(.*?)'/).map((str) => str.substring(1, str.length - 1)).skip(import_parsimmon.optWhitespace);
var SWORD = WORD.or(STRING);
var STRING_VAL = (0, import_parsimmon.lazy)(() => WORD.map((value) => ({ value, type: "key" })).or(STRING.map((value) => ({ value, type: "string" }))));

// src/exercises/Exercise.ts
var Exercise = class {
  constructor(tagname, elm, flags) {
    this.elm = document.createElement(tagname);
    this.elm.classList.add("exercise-elm");
    this.flags = flags;
    this.length = 1;
    this.clear();
    elm.appendChild(this.elm);
    this.elm.addEventListener("input", () => {
      this.clear();
    });
  }
  validate() {
    return 0;
  }
  reveal() {
    this.clear();
  }
  correct(specificElm = null) {
    if (!specificElm)
      specificElm = this.elm;
    specificElm.classList.add("res-correct");
    specificElm.classList.remove("res-wrong");
    return 1;
  }
  wrong(specificElm = null) {
    if (!specificElm)
      specificElm = this.elm;
    specificElm.classList.remove("res-correct");
    specificElm.classList.add("res-wrong");
    return 0;
  }
  clear(specificElm = null) {
    if (!specificElm)
      specificElm = this.elm;
    specificElm.classList.remove("res-correct");
    specificElm.classList.remove("res-wrong");
  }
};

// src/tools/sorting.ts
function randomizeArray(arr) {
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * i);
    const k = arr[i];
    arr[i] = arr[j];
    arr[j] = k;
  }
  return arr;
}

// src/exercises/SelectExercise.ts
var SelectExercise = class extends Exercise {
  constructor(elm, dataStr, flags) {
    super("select", elm, flags);
    this.elm.classList.add("exercise-select");
    const first = document.createElement("option");
    this.elm.appendChild(first);
    first.value = "0";
    first.textContent = "-";
    const data = SelectExercise.parse(dataStr);
    console.log(data);
    let valCount = 1;
    this.correctOpts = [];
    for (const val of randomizeArray(data)) {
      const el = document.createElement("option");
      let correct = false;
      if (val.correct) {
        correct = true;
        this.correctOpts.push(el);
      }
      el.value = valCount.toString();
      el.textContent = val.value;
      el.setAttribute("data-correct", correct ? "1" : "0");
      valCount++;
      this.elm.appendChild(el);
    }
  }
  validate() {
    const opt2 = this.elm.options[this.elm.options.selectedIndex];
    if (opt2.getAttribute("data-correct") === "1")
      return this.correct();
    else
      return this.wrong();
  }
  reveal() {
    this.clear();
    if (this.correctOpts[0])
      this.elm.value = this.correctOpts[0].value;
  }
  static parse(data) {
    return listed((0, import_parsimmon.seqMap)(OPTW_EOF, opt((0, import_parsimmon.string)("*")), SWORD, (_, valid, value) => ({ correct: valid !== null, value }))).tryParse(data);
  }
};

// src/exercises/InputExercise.ts
var InputExercise = class extends Exercise {
  constructor(elm, dataStr, flags) {
    super("input", elm, flags);
    this.elm.classList.add("exercise-input");
    this.elm.placeholder = "-";
    const data = InputExercise.parse(dataStr);
    this.correctOpts = [];
    for (const val of data)
      this.correctOpts.push(val);
  }
  validate() {
    const val = this.elm.value;
    if (this.correctOpts.includes(val))
      return this.correct();
    else
      return this.wrong();
  }
  reveal() {
    this.clear();
    if (this.correctOpts[0])
      this.elm.value = this.correctOpts[0];
  }
  static parse(data) {
    return listed(sided(SWORD)).tryParse(data);
  }
};

// src/exercises/LineExercise.ts
var LineExercise = class extends InputExercise {
  constructor(elm, dataStr, flags) {
    super(elm, dataStr, flags);
    this.elm.classList.add("exercise-line");
  }
};

// src/exercises/MatchExercise.ts
var MatchExercise = class extends Exercise {
  constructor(elm, dataStr, flags) {
    super("div", elm, flags);
    this.elm.classList.add("exercise-match");
    this.elm.classList.remove("exercise-elm");
    this.leftSelected = null;
    this.leftElms = [];
    this.rightSelected = null;
    this.rightElms = [];
    const top = document.createElement("div");
    this.elm.appendChild(top);
    this.ltSec = document.createElement("div");
    this.rtSec = document.createElement("div");
    top.appendChild(this.ltSec);
    top.appendChild(this.rtSec);
    const bot = document.createElement("div");
    this.elm.appendChild(bot);
    this.lbSec = document.createElement("div");
    this.rbSec = document.createElement("div");
    bot.appendChild(this.lbSec);
    bot.appendChild(this.rbSec);
    const data = MatchExercise.parse(dataStr);
    this.length = 0;
    this.correctOpts = {};
    for (const [val1, val2] of data) {
      this.correctOpts[val1] = val2;
      const lElm = this.createElm(val1, false);
      this.leftElms.push(lElm);
      const rElm = this.createElm(val2, true);
      this.rightElms.push(rElm);
      lElm.correctElm = rElm;
      rElm.correctElm = lElm;
      lElm.elm.classList.add("exercise-elm");
      rElm.elm.classList.add("exercise-elm");
      lElm.elm.addEventListener("click", () => this.elmClick(lElm, false));
      rElm.elm.addEventListener("click", () => this.elmClick(rElm, true));
      this.length++;
    }
    for (const { elm: elm2 } of randomizeArray(this.leftElms))
      this.ltSec.appendChild(elm2);
    for (const { elm: elm2 } of randomizeArray(this.rightElms))
      this.rtSec.appendChild(elm2);
  }
  validate() {
    let correct = 0;
    for (const matchElm of this.leftElms) {
      if (!matchElm.correctElm)
        continue;
      if (!matchElm.link || matchElm.correctElm.value !== matchElm.link.value) {
        this.wrong(matchElm.elm);
        this.wrong(matchElm.correctElm.elm);
        continue;
      }
      correct++;
      this.correct(matchElm.elm);
      this.correct(matchElm.correctElm.elm);
    }
    return correct;
  }
  reveal() {
    for (const matchElm of this.leftElms) {
      this.clear(matchElm.elm);
      this.leftSelected = matchElm;
      this.rightSelected = matchElm.correctElm;
      this.elmGroup();
    }
    for (const matchElm of this.rightElms) {
      this.clear(matchElm.elm);
    }
  }
  static parse(data) {
    return listed((0, import_parsimmon.seqMap)(sided(SWORD), keyed((0, import_parsimmon.string)("=>")), sided(SWORD), (v1, _, v2) => [v1, v2])).tryParse(data);
  }
  createElm(content, right = false) {
    const elm = document.createElement("button");
    (right ? this.rtSec : this.ltSec).appendChild(elm);
    elm.classList.add("elm");
    elm.textContent = content;
    return { elm, link: null, right, value: content, correctElm: null };
  }
  elmClick(matchElm, right = false) {
    if (matchElm.link)
      return this.elmUngroup(matchElm);
    const group = right && this.leftSelected || this.rightSelected;
    this.elmSelect(matchElm, right);
    if (group)
      this.elmGroup();
  }
  elmSelect(matchElm, right = false) {
    matchElm.elm.classList.add("selected");
    if (right) {
      this.elmClearClasses(this.rightSelected);
      this.rightSelected = matchElm;
    } else {
      this.elmClearClasses(this.leftSelected);
      this.leftSelected = matchElm;
    }
  }
  elmClearClasses(matchElm) {
    if (!matchElm)
      return;
    matchElm.elm.classList.remove("selected");
  }
  elmClear(right = null) {
    if (right === true) {
      this.elmClearClasses(this.rightSelected);
      this.rightSelected = null;
    } else if (right === false) {
      this.elmClearClasses(this.leftSelected);
      this.leftSelected = null;
    } else {
      this.elmClear(true);
      this.elmClear(false);
    }
  }
  elmGroup() {
    if (!this.leftSelected || !this.rightSelected)
      return;
    this.lbSec.appendChild(this.leftSelected.elm);
    this.rbSec.appendChild(this.rightSelected.elm);
    this.leftSelected.link = this.rightSelected;
    this.rightSelected.link = this.leftSelected;
    this.elmClear();
  }
  elmUngroup(matchElm) {
    if (!matchElm.link)
      return;
    if (matchElm.right) {
      this.rtSec.appendChild(matchElm.elm);
      this.ltSec.appendChild(matchElm.link.elm);
    } else {
      this.ltSec.appendChild(matchElm.elm);
      this.rtSec.appendChild(matchElm.link.elm);
    }
    this.clear(matchElm.elm);
    this.clear(matchElm.link.elm);
    matchElm.link.link = null;
    matchElm.link = null;
  }
};

// src/exercises/index.ts
var import_obsidian = require("obsidian");

// src/exercises/MultipleChoiceExercise.ts
var MultipleChoiceExercise = class extends Exercise {
  constructor(elm, dataStr, flags) {
    super("div", elm, flags);
    this.elm.classList.add("exercise-choice");
    this.elm.classList.remove("exercise-elm");
    const data = MultipleChoiceExercise.parse(dataStr);
    console.log(data);
    this.optList = [];
    this.correctOpts = [];
    for (const val of randomizeArray(data)) {
      const el = document.createElement("div");
      el.classList.add("elm");
      el.classList.add("exercise-elm");
      let correct = false;
      this.optList.push(el);
      if (val.correct) {
        correct = true;
        this.correctOpts.push(el);
      }
      el.setAttribute("data-correct", correct ? "1" : "0");
      el.textContent = val.value;
      el.addEventListener("click", () => {
        this.clear(el);
        el.classList.toggle("selected");
      });
      this.elm.appendChild(el);
    }
  }
  validate() {
    let isWrong = false;
    for (const el of this.optList) {
      if (el.getAttribute("data-correct") === "1") {
        if (el.classList.contains("selected"))
          this.correct(el);
        else {
          this.wrong(el);
          isWrong = true;
        }
      } else {
        if (el.classList.contains("selected")) {
          this.wrong(el);
          isWrong = true;
        }
      }
    }
    return isWrong ? 0 : 1;
  }
  reveal() {
    for (const el of this.optList) {
      this.clear(el);
      if (el.getAttribute("data-correct") === "1")
        el.classList.add("selected");
      else
        el.classList.remove("selected");
    }
  }
  static parse(data) {
    return listed((0, import_parsimmon.seqMap)(OPTW_EOF, opt((0, import_parsimmon.string)("*")), SWORD, (_, valid, value) => ({ correct: valid !== null, value }))).tryParse(data);
  }
};

// src/exercises/index.ts
var REPLACE_STRING = "$#rp$";
var exercises_default = (app, data, elm, ctx) => {
  elm.classList.add("exercise-block");
  const processOpts = [];
  const processedArgs = [];
  const processedData = data.replace(/\$(\w+)(:(?:.|\n)*?)*\{((?:.|\n|\))*?)\}/g, (substr, ...args) => {
    var _a;
    const flagStr = (_a = args[1]) != null ? _a : "";
    const data2 = args[2].toString().trim();
    const flags = handleFlags(flagStr);
    processedArgs.push({ name: args[0], flags, data: data2 });
    return REPLACE_STRING;
  }).split("\n").map((row) => row.split(REPLACE_STRING));
  let pos = 0;
  for (let i = 0; i < processedData.length; i++) {
    const rowData = processedData[i];
    const el = elm.createEl("div");
    el.classList.add("exercise-row");
    for (let j = 0; j < rowData.length; j++) {
      const dataElm = rowData[j];
      import_obsidian.MarkdownRenderer.render(app, dataElm, el, ctx.sourcePath, new import_obsidian.Component());
      if (j + 1 === rowData.length)
        continue;
      if (!processedArgs[pos])
        continue;
      const { name, flags, data: data2 } = processedArgs[pos++];
      const res = getExercise(name, el, data2, flags);
      if (res)
        processOpts.push(res);
    }
  }
  const btns = elm.createEl("div");
  const btnReveal = document.createElement("button");
  btnReveal.classList.add("btn-exercise");
  btnReveal.classList.add("btn-exercise-reveal");
  const btnCheck = document.createElement("button");
  btnCheck.classList.add("btn-exercise");
  btnCheck.classList.add("btn-exercise-check");
  btns.appendChild(btnReveal);
  btnReveal.textContent = "Reveal";
  btns.appendChild(btnCheck);
  btnCheck.textContent = "Check";
  const validTxt = document.createElement("span");
  validTxt.classList.add("valid-text");
  btns.appendChild(validTxt);
  validTxt.textContent = "";
  btnReveal.addEventListener("click", () => {
    for (const opt2 of processOpts)
      opt2.reveal();
    validTxt.textContent = "";
  });
  btnCheck.addEventListener("click", () => {
    let valid = 0;
    let length = 0;
    for (const opt2 of processOpts) {
      valid += opt2.validate();
      length += opt2.length;
    }
    validTxt.textContent = "";
    const vTxtValue = validTxt.createEl("b");
    vTxtValue.textContent = valid.toString();
    const vTxtInfo = validTxt.createEl("span");
    vTxtInfo.textContent = "/" + length + " (" + Math.round(valid * 100 / length) + "%)";
  });
};
function getExercise(name, elm, dataStr, flags) {
  switch (name) {
    case "select":
    case "s":
      return new SelectExercise(elm, dataStr, flags);
    case "input":
    case "i":
      return new InputExercise(elm, dataStr, flags);
    case "line":
    case "l":
      return new LineExercise(elm, dataStr, flags);
    case "match":
    case "m":
      return new MatchExercise(elm, dataStr, flags);
    case "choice":
    case "c":
      return new MultipleChoiceExercise(elm, dataStr, flags);
  }
  return null;
}
var DEFAULT_FLAGS = {
  case: false,
  random: false
};
function handleFlags(flags) {
  const flagArr = { ...DEFAULT_FLAGS };
  for (const flag of flags) {
    switch (flag.toLowerCase()) {
      case "c":
        flagArr.case = true;
        break;
      case "r":
        flagArr.random = true;
        break;
    }
  }
  return flagArr;
}

// src/main.ts
var ObsidianExercises = class extends import_obsidian2.Plugin {
  async onload() {
    this.registerMarkdownCodeBlockProcessor(
      "exercise",
      (data, elm, ctx) => exercises_default(this.app, data, elm, ctx)
    );
  }
};
